/**
    @file treeReader.h

    @brief This file is automatically generated from ROOT file 
	/mnt/hadoop/user/uscms01/pnfs/unl.edu/data4/cms/store/user/malbouis/Hbb/HbbNtuples/oct9Ntuple/
	TestZH_ZToLL_HToBB_M-115_7TeV-powheg-herwigpp.root
    on Wed Oct 26 23:24:15 UTC 2011 by the script createReader.py.

    @warning
    Users may need to edit the content of this file to fit their needs.

    @date Wed Oct 26 23:24:15 UTC 2011

 */


#ifndef treeReader_treeReader_h
#define treeReader_treeReader_h


#include<haryo/RootTreeReader/interface//RootTreeReader.h>
#include<UserCode/wilken/interface/tree.h>


/**
    @class treeReader

    @brief An interface to analyze ROOT file(s) containing tree,
    derived from the RootTreeReader and tree.
    This class is automatically generated from ROOT file 
	/mnt/hadoop/user/uscms01/pnfs/unl.edu/data4/cms/store/user/malbouis/Hbb/HbbNtuples/oct9Ntuple/
	TestZH_ZToLL_HToBB_M-115_7TeV-powheg-herwigpp.root
    on Wed Oct 26 23:24:15 UTC 2011 by the script createReader.py.
    Users may need to edit the content of this class to fit their needs.
    See also the documentation of RootTreeReader class.

    @date Wed Oct 26 23:24:15 UTC 2011

 */
class treeReader:
public RootTreeReader<tree>
{
public:

    /**
       Constructor using input filename.
       Input filename can either be a ROOT file or an ASCII file
       which contains a list of ROOT file, with one ROOT file per line.
       Initialize the tree structure and read tree event(s)
       from ROOT file(s)

       @param inputFile Input file.

       @param treeName The name of the tree to be processed.  If the
       tree is located under a directory, then the name should contain the
       directory name.  See the documentation for the ROOT
       <a href=http://root.cern.ch/root/html/TChain.html>TChain</a> class.
    */
    treeReader(std::string inputFile,
                   std::string treeName);

    /**
       Constructor using input filename.
       Input filename can either be a ROOT file or an ASCII file
       which contains a list of ROOT file, with one ROOT file per line.
       Initialize the tree structure and read tree event(s)
       from ROOT file(s)

       @param inputFile Input file.

       @param directoryName Name of directory in the ROOT file(s)
       under which the tree is located.

       @param treeName Name of the tree in the ROOT file(s).
    */
    treeReader(std::string inputFile,
                   std::string directoryName,
                   std::string treeName);
    /**
       Destructor.
     */

    ~treeReader();

    /**
       Initialize the tree structure.
     */
    void    initTree();


protected:

    // List of branches.
    TBranch*        b_H;
    TBranch*        b_V;
    TBranch*        b_nhJets;
    TBranch*        b_naJets;
    TBranch*        b_hJet_pt;
    TBranch*        b_hJet_eta;
    TBranch*        b_hJet_phi;
    TBranch*        b_hJet_csv;
    TBranch*        b_hJet_cosTheta;
    TBranch*        b_hJet_numTracksSV;
    TBranch*        b_hJet_chf;
    TBranch*        b_hJet_nhf;
    TBranch*        b_hJet_cef;
    TBranch*        b_hJet_nef;
    TBranch*        b_hJet_nch;
    TBranch*        b_hJet_nconstituents;
    TBranch*        b_hJet_flavour;
    TBranch*        b_hJet_genPt;
    TBranch*        b_hJet_genEta;
    TBranch*        b_hJet_genPhi;
    TBranch*        b_hJet_JECUnc;
    TBranch*        b_hJet_vtxMass;
    TBranch*        b_hJet_vtx3dL;
    TBranch*        b_hJet_vtx3deL;
    TBranch*        b_hJet_id;
    TBranch*        b_aJet_pt;
    TBranch*        b_aJet_eta;
    TBranch*        b_aJet_phi;
    TBranch*        b_aJet_csv;
    TBranch*        b_aJet_cosTheta;
    TBranch*        b_aJet_numTracksSV;
    TBranch*        b_aJet_chf;
    TBranch*        b_aJet_nhf;
    TBranch*        b_aJet_cef;
    TBranch*        b_aJet_nef;
    TBranch*        b_aJet_nch;
    TBranch*        b_aJet_nconstituents;
    TBranch*        b_aJet_flavour;
    TBranch*        b_aJet_genPt;
    TBranch*        b_aJet_genEta;
    TBranch*        b_aJet_genPhi;
    TBranch*        b_aJet_JECUnc;
    TBranch*        b_aJet_vtxMass;
    TBranch*        b_aJet_vtx3dL;
    TBranch*        b_aJet_vtx3deL;
    TBranch*        b_aJet_id;
    TBranch*        b_numJets;
    TBranch*        b_numBJets;
    TBranch*        b_deltaPullAngle;
    TBranch*        b_gendrcc;
    TBranch*        b_gendrbb;
    TBranch*        b_genZpt;
    TBranch*        b_genWpt;
    TBranch*        b_weightTrig;
    TBranch*        b_weightTrigMay;
    TBranch*        b_weightTrigV4;
    TBranch*        b_weightTrigMET;
    TBranch*        b_weightEleRecoAndId;
    TBranch*        b_weightEleTrigJetMETPart;
    TBranch*        b_weightEleTrigElePart;
    TBranch*        b_deltaPullAngleAK7;
    TBranch*        b_PUweight;
    TBranch*        b_eventFlav;
    TBranch*        b_Vtype;
    TBranch*        b_HVdPhi;
    TBranch*        b_HVMass;
    TBranch*        b_HMETdPhi;
    TBranch*        b_VMt;
    TBranch*        b_nvlep;
    TBranch*        b_nalep;
    TBranch*        b_vLepton_mass;
    TBranch*        b_vLepton_pt;
    TBranch*        b_vLepton_eta;
    TBranch*        b_vLepton_phi;
    TBranch*        b_vLepton_aodCombRelIso;
    TBranch*        b_vLepton_pfCombRelIso;
    TBranch*        b_vLepton_photonIso;
    TBranch*        b_vLepton_neutralHadIso;
    TBranch*        b_vLepton_chargedHadIso;
    TBranch*        b_vLepton_particleIso;
    TBranch*        b_vLepton_dxy;
    TBranch*        b_vLepton_dz;
    TBranch*        b_vLepton_type;
    TBranch*        b_vLepton_id80;
    TBranch*        b_vLepton_id95;
    TBranch*        b_aLepton_mass;
    TBranch*        b_aLepton_pt;
    TBranch*        b_aLepton_eta;
    TBranch*        b_aLepton_phi;
    TBranch*        b_aLepton_aodCombRelIso;
    TBranch*        b_aLepton_pfCombRelIso;
    TBranch*        b_aLepton_photonIso;
    TBranch*        b_aLepton_neutralHadIso;
    TBranch*        b_aLepton_chargedHadIso;
    TBranch*        b_aLepton_particleIso;
    TBranch*        b_aLepton_dxy;
    TBranch*        b_aLepton_dz;
    TBranch*        b_aLepton_type;
    TBranch*        b_aLepton_id80;
    TBranch*        b_aLepton_id95;
    TBranch*        b_top;
    TBranch*        b_nSvs;
    TBranch*        b_Sv_massBCand;
    TBranch*        b_Sv_massSv;
    TBranch*        b_Sv_pt;
    TBranch*        b_Sv_eta;
    TBranch*        b_Sv_phi;
    TBranch*        b_Sv_dist3D;
    TBranch*        b_Sv_dist2D;
    TBranch*        b_Sv_distSim2D;
    TBranch*        b_Sv_distSig3D;
    TBranch*        b_Sv_dist3D_norm;
    TBranch*        b_SVH;
    TBranch*        b_rho;
    TBranch*        b_rho25;
    TBranch*        b_nPVs;
    TBranch*        b_METnoPU;
    TBranch*        b_MET;
    TBranch*        b_MHT;
    TBranch*        b_minDeltaPhijetMET;
    TBranch*        b_jetPt_minDeltaPhijetMET;
    TBranch*        b_triggerFlags;
    TBranch*        b_EVENT;
    TBranch*        b_hbhe;
    TBranch*        b_btag1TSF;
    TBranch*        b_btag2TSF;
    TBranch*        b_btag1T2CSF;
    TBranch*        b_btag2CSF;
    TBranch*        b_btagA0CSF;

};

#endif
