/**
    @file hbbReader.h

    @brief This file is automatically generated from ROOT file /tmp/wilken/ZH_Summer11.root
    on Wed Oct 19 19:22:33 UTC 2011 by the script createReader.py.

    @warning
    Users may need to edit the content of this file to fit their needs.

    @date Wed Oct 19 19:22:33 UTC 2011

    $Id: hbbReader.h,v 1.7 2010/09/29 15:13:07 haryo Exp $
 */


#ifndef hbbReader_hbbReader_h
#define hbbReader_hbbReader_h


#include<haryo/RootTreeReader/interface/RootTreeReader.h>
#include<UserCode/wilken/interface/hbb.h>


/**
    @class hbbReader

    @brief An interface to analyze ROOT file(s) containing hbb,
    derived from the RootTreeReader and hbb.
    This class is automatically generated from ROOT file /tmp/wilken/ZH_Summer11.root
    on Wed Oct 19 19:22:33 UTC 2011 by the script createReader.py.
    Users may need to edit the content of this class to fit their needs.
    See also the documentation of RootTreeReader class.

    @date Wed Oct 19 19:22:33 UTC 2011

    $Id: hbbReader.h,v 1.7 2010/09/29 15:13:07 haryo Exp $
 */

class hbbReader: public RootTreeReader<hbb> {
public:

    /**
       Constructor using input filename.
       Input filename can either be a ROOT file or an ASCII file
       which contains a list of ROOT file, with one ROOT file per line.
       Initialize the hbb structure and read hbb event(s)
       from ROOT file(s)

       @param inputFile Input file.

       @param treeName The name of the tree to be processed.  If the
       tree is located under a directory, then the name should contain the
       directory name.  See the documentation for the ROOT
       <a href=http://root.cern.ch/root/html/TChain.html>TChain</a> class.
    */
    hbbReader(std::string inputFile,
                   std::string treeName);

    /**
       Constructor using input filename.
       Input filename can either be a ROOT file or an ASCII file
       which contains a list of ROOT file, with one ROOT file per line.
       Initialize the hbb structure and read hbb event(s)
       from ROOT file(s)

       @param inputFile Input file.

       @param directoryName Name of directory in the ROOT file(s)
       under which the hbb is located.

       @param treeName Name of the tree in the ROOT file(s).
    */
    hbbReader(std::string inputFile,
                   std::string directoryName,
                   std::string treeName);
    /**
       Destructor.
     */

    ~hbbReader();

    /**
       Initialize the tree structure.
     */
    void    initTree();


protected:

    // List of branches.
    TBranch*        b_nEvents;
    TBranch*        b_evtNumber;
    TBranch*        b_runNumber;
    TBranch*        b_lumiBlock;
    TBranch*        b_hasGoodPV;
    TBranch*        b_SMTtags;
    TBranch*        b_HLT_IsoMu13_v4_trig;
    TBranch*        b_HLT_IsoMu15_v4_trig;
    TBranch*        b_HLT_IsoMu17_v4_trig;
    TBranch*        b_HLT_IsoMu17_v5_trig;
    TBranch*        b_HLT_IsoMu17_v6_trig;
    TBranch*        b_HLT_IsoMu17_v7_trig;
    TBranch*        b_HLT_IsoMu17_v8_trig;
    TBranch*        b_HLT_CentralJet80_MET80_trig;
    TBranch*        b_HLT_pfMHT150_trig;
    TBranch*        b_HLT_L1_ETM30_trig;
    TBranch*        b_HLT_MET100_trig;
    TBranch*        b_nJets;
    TBranch*        b_nMuons;
    TBranch*        b_nRawJets;
    TBranch*        b_nRawMuons;
    TBranch*        b_jetPt;
    TBranch*        b_jetEta;
    TBranch*        b_jetPhi;
    TBranch*        b_jetPx;
    TBranch*        b_jetPy;
    TBranch*        b_jetPz;
    TBranch*        b_jetP;
    TBranch*        b_jetFlavour;
    TBranch*        b_jetNumberOfDaughters;
    TBranch*        b_jetChargedMultiplicity;
    TBranch*        b_jetChargedEmEnergyFraction;
    TBranch*        b_jetNeutralHadronEnergyFraction;
    TBranch*        b_jetNeutralEmEnergyFraction;
    TBranch*        b_jetChargedHadronEnergyFraction;
    TBranch*        b_muonPt;
    TBranch*        b_muonEta;
    TBranch*        b_muonPhi;
    TBranch*        b_muonP;
    TBranch*        b_muonPx;
    TBranch*        b_muonPy;
    TBranch*        b_muonPz;
    TBranch*        b_isGlobalMuon;
    TBranch*        b_isTrackerMuon;
    TBranch*        b_muonNormalizedChi2;
    TBranch*        b_muonDB;
    TBranch*        b_muonTrackIso;
    TBranch*        b_muonCaloIso;
    TBranch*        b_muonNumberOfValidTrackerHits;
    TBranch*        b_muonNumberOfValidPixelHits;
    TBranch*        b_muonNumberOfValidMuonHits;
    TBranch*        b_muonNumberOfMatches;
    TBranch*        b_SMTevent;
    TBranch*        b_bDisc_TCHE;
    TBranch*        b_bDisc_TCHP;
    TBranch*        b_bDisc_SSVHE;
    TBranch*        b_bDisc_SSVHP;
    TBranch*        b_bDisc_CSV;
    TBranch*        b_bDisc_JP;
    TBranch*        b_bDisc_JBP;
    TBranch*        b_bDisc_SMT;
    TBranch*        b_bDisc_SMTIP3dB;
    TBranch*        b_bDisc_SMTPt;
    TBranch*        b_bDisc_SETIP3dB;
    TBranch*        b_bDisc_SETPt;
    TBranch*        b_bDisc_CSVMVA;
    TBranch*        b_smt_jet;
    TBranch*        b_MetPFSumEt;
    TBranch*        b_MetPFmEtSig;
    TBranch*        b_MetPFPx;
    TBranch*        b_MetPFPy;
    TBranch*        b_MetPFPz;
    TBranch*        b_MetPFPt;
    TBranch*        b_MetPFPhi;
    TBranch*        b_MetPFEta;
    TBranch*        b_muIsPVcompatible;
    TBranch*        b_dR_isoMu_jet;
    TBranch*        b_MCHstatus;
    TBranch*        b_MCHmomid;
    TBranch*        b_MCHGmomid;
    TBranch*        b_MCHpt;
    TBranch*        b_MCHeta;
    TBranch*        b_MCHphi;
    TBranch*        b_MCHmass;
    TBranch*        b_MCHndau;
    TBranch*        b_MCHdauid;
    TBranch*        b_MCHdaupt;
    TBranch*        b_MCHdaueta;
    TBranch*        b_MCHdauphi;
    TBranch*        b_MCZstatus;
    TBranch*        b_MCZmomid;
    TBranch*        b_MCZGmomid;
    TBranch*        b_MCZcharge;
    TBranch*        b_MCZpt;
    TBranch*        b_MCZeta;
    TBranch*        b_MCZphi;
    TBranch*        b_MCZmass;
    TBranch*        b_MCZndau;
    TBranch*        b_MCZdauid;
    TBranch*        b_MCZdaupt;
    TBranch*        b_MCZdaueta;
    TBranch*        b_MCZdauphi;
    TBranch*        b_MCbstatus;
    TBranch*        b_MCbmomid;
    TBranch*        b_MCbGmomid;
    TBranch*        b_MCbpt;
    TBranch*        b_MCbeta;
    TBranch*        b_MCbphi;
    TBranch*        b_MCbpx;
    TBranch*        b_MCbpy;
    TBranch*        b_MCbpz;
    TBranch*        b_MCbE;
    TBranch*        b_MCbbarstatus;
    TBranch*        b_MCbbarmomid;
    TBranch*        b_MCbbarGmomid;
    TBranch*        b_MCbbarpt;
    TBranch*        b_MCbbareta;
    TBranch*        b_MCbbarphi;
    TBranch*        b_MCbbarpx;
    TBranch*        b_MCbbarpy;
    TBranch*        b_MCbbarpz;
    TBranch*        b_MCbbarE;
    TBranch*        b_MCHDaubNdau;
    TBranch*        b_MCHDaubdaupt;
    TBranch*        b_MCHDaubdaueta;
    TBranch*        b_MCHDaubdauphi;
    TBranch*        b_MCHDaubdaupx;
    TBranch*        b_MCHDaubdaupy;
    TBranch*        b_MCHDaubdaupz;
    TBranch*        b_MCHDaubdauE;
    TBranch*        b_MCHDaubbarNdau;
    TBranch*        b_MCHDaubbardaupt;
    TBranch*        b_MCHDaubbardaueta;
    TBranch*        b_MCHDaubbardauphi;
    TBranch*        b_MCHDaubbardaupx;
    TBranch*        b_MCHDaubbardaupy;
    TBranch*        b_MCHDaubbardaupz;
    TBranch*        b_MCHDaubbardauE;
    TBranch*        b_MCccstatus;
    TBranch*        b_MCccmomid;
    TBranch*        b_MCccGmomid;

};

#endif
